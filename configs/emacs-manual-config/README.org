#+TITLE: My Emacs Configuration
#+AUTHOR: Gil Mendes
#+EMAIL: gil00mendes@gmail.com
#+OPTIONS: num:nil
#+PROPERTY: header-args:emacs-lisp :tangle yes

This is my literate configuration for [[https://www.gnu.org/software/emacs/][Emacs]].

* Early initialization
** Setup Melpa 
Melpa is the big package repo that nearly /everything/ can be found. It's a must for emacs configs.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+END_SRC

** Setup =use-package= if isn't already
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC

** Auto-compile
#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :ensure t)
#+END_SRC

** Startup
Time the startup and display the startup time after completed.

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
	  (lambda ()
		 (message "Loaded Emacs in %.03fs"
			  (float-time (time-subtract after-init-time before-init-time)
        ))))
#+END_SRC

Temporarily reduce garbage collection to gain some performance boost during startup.
#+BEGIN_SRC emacs-lisp
(let ((normal-gc-cons-threshold gc-cons-threshold)
      (normal-gc-cons-percentage gc-cons-percentage)
      (normal-file-name-handler-alist file-name-handler-alist)
      (init-gc-cons-threshold most-positive-fixnum)
      (init-gc-cons-percentage 0.6))
  (setq gc-cons-threshold init-gc-cons-threshold
        gc-cons-percentage init-gc-cons-percentage
        file-name-handler-alist nil)
  (add-hook 'after-init-hook
            `(lambda ()
               (setq gc-cons-threshold ,normal-gc-cons-threshold
                     gc-cons-percentage ,normal-gc-cons-percentage
                     file-name-handler-alist ',normal-file-name-handler-alist))))
#+END_SRC

Inhibit startup screen and messages.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
#+END_SRC

Performance tweaks.  Don't load default library and use =fundamental-mode= to reduce amount
of hooks.
#+BEGIN_SRC emacs-lisp
(setq inhibit-default-init t)
(setq initial-major-mode 'fundamental-mode)
#+END_SRC

** UI
Disable GUI components.

#+BEGIN_SRC emacs-lisp
(setq use-dialog-box nil)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
#+END_SRC

Don't implicitly resize frames when changing various settings.
#+BEGIN_SRC emacs-lisp
(setq frame-inhibit-implied-resize t)
#+END_SRC

Ignore X resources.
#+BEGIN_SRC emacs-lisp
(advice-add #'x-apply-session-resources :override #'ignore)
#+END_SRC

* Configuration
** General

*** About me
Tell Emacs who's driving
#+BEGIN_SRC emacs-lisp
(setq user-full-name    "Gil Mendes"
      user-mail-address "gil00mendes@gmail.com")
#+END_SRC

*** Caching
Provide a location where Emacs can store data and cache.
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (defvar data-dir
    (if (getenv "XDG_DATA_HOME")
        (concat (getenv "XDG_DATA_HOME") "/emacs/")
      (expand-file-name "~/.local/share/emacs/"))
    "Directory for data.")

  (defvar cache-dir
    (if (getenv "XDG_CACHE_HOME")
        (concat (getenv "XDG_CACHE_HOME") "/emacs/")
      (expand-file-name "~/.cache/emacs/"))
    "Directory for cache.")

  (defvar pictures-dir
    (or (getenv "XDG_PICTURES_DIR")
        (expand-file-name "~/Pictures/"))
    "Directory for pictures."))
#+END_SRC

*** Global =:ensure= for use-package statements
=use-package= has an =:ensure= keyword which dictates whether packages are installed or not.
As most of my =use-package= configurations are for external packages, I set this to always ensure.
Then, in cases where I don't want this to be true, I simply set =:ensure nil=.
For any nested statements, it's necessary to set =:ensure t=.
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

*** Start the server
Start the Emacs server so other clients can connect and use the same session.
This is useful for when you may be operating Emacs from the GUI usually, but want to use the same session from a TTY/terminal.
Also handy for when you have your ~EDITOR~ set to ~emacsclient~.
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

*** A few Darwin specific configurations
To make Emacs play a little nicer with window management, enable menu-bar-mode.
Also, set the frame's dimensions based on pixels - this makes Emacs play nicer with tiling
window managers, where no title bar is displayed.
#+BEGIN_SRC emacs-lisp
(cond
 ((string-equal system-type "darwin")
  (setq frame-resize-pixelwise  t)
  (menu-bar-mode t)))
#+END_SRC

*** Deactivation of functionality I don't tend to use
- Autosaving
- Start-up message
- Audible bell
- Toolbar, tooltip, scrollbar, blinking cursor
#+BEGIN_SRC emacs-lisp
(setq auto-save-default       nil
      inhibit-startup-message t
      ring-bell-function      'ignore)
(dolist (mode
         '(tool-bar-mode
           tooltip-mode
           scroll-bar-mode
           blink-cursor-mode))
  (funcall mode 0))
#+END_SRC

*** Comfier frame settings
#+BEGIN_SRC emacs-lisp
(setq default-frame-alist
      (append (list
               '(min-height . 1)
               '(height     . 45)
               '(min-width  . 1)
               '(width      . 81)
               '(vertical-scroll-bars . nil)
               '(left-fringe    . 0)
               '(right-fringe   . 0)
               '(tool-bar-lines . 0))))
#+END_SRC

*** Set =fill-column=
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 120)
#+END_SRC

*** winner-mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

*** Globally highlight the current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC

*** Discard customizations
Emacs has a comprehensive customization system that allows configuration changes interactively.
Personally, I opt to ensure all the configuration I use for my environment is declarative.
As such, the following configuration sets the ~custom-file~ to be a random temporary file created each time Emacs starts.
This means any customizations made interactively are discarded entirely.
#+BEGIN_SRC emacs-lisp
(setq custom-file (make-temp-file ""))
#+END_SRC

*** Just use 'y' or 'n' instead of 'yes' or 'no'
You'll find =yes-or-no= prompts coming up in Emacs a lot.
I'd much rather just type =y= or =n= than =yes= or =no= every time...
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Confirm quit
This adds a confirmation prompt when quitting Emacs - because I'm only human.
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

*** Set the scratch buffer string
Set the scratch buffer's initial contents to include a comment with a timestamp of creation.
Not really all that useful, but cleaner than the default comment, and I like having something there.
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message (format ";; Scratch buffer - started on %s\n\n" (current-time-string)))
#+END_SRC

*** FlySpell settings
I use =aspell=, so this simply sets [[https://www.emacswiki.org/emacs/FlySpell][Flyspell]] to use it and passes a couple extra arguments
- Configure FlySpell to use aspell
- Set =C-;= to a =nil= binding so it doesn't clash with NeoTree
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure nil
  :bind
  (:map flyspell-mode-map ("C-;" . nil))
  :init
  (setq ispell-program-name "aspell"
        ispell-extra-args   '("--sug-mode=ultra" "--lang=en_GB")))
#+END_SRC

*** org-mode
Various pieces of configuration for the mighty org-mode.
#+BEGIN_SRC emacs-lisp
(use-package org-mode
  :ensure nil
  :hook
  (org-mode . org-indent-mode)
  (org-mode . variable-pitch-mode)
  (org-mode . visual-line-mode)
  :custom-face
  (avy-lead             ((t (:inherit fixed-pitch))))
  (avy-lead-face-0      ((t (:inherit fixed-pitch))))
  (avy-lead-face-1      ((t (:inherit fixed-pitch))))
  (avy-lead-face-2      ((t (:inherit fixed-pitch))))
  (company-tooltip      ((t (:inherit fixed-pitch))))
  (org-table            ((t (:inherit fixed-pitch))))
  (org-formula          ((t (:inherit fixed-pitch))))
  (org-checkbox         ((t (:inherit fixed-pitch))))
  (org-code             ((t (:inherit fixed-pitch))))
  (org-verbatim         ((t (:inherit fixed-pitch))))
  (org-special-keyword  ((t (:inherit fixed-pitch))))
  (org-meta-line        ((t (:inherit fixed-pitch))))
  (org-block            ((t (:foreground nil :inherit fixed-pitch))))
  (org-indent           ((t (:inherit (org-hide fixed-pitch)))))
  (fixed-pitch          ((t (:family "Menlo" :height 120))))
  (variable-pitch       ((t (:family "ETBembo" :height 160))))

  :init
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t
        org-cycle-separator-lines 2
        org-clock-persist 'history)

  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  :config
  (org-clock-persistence-insinuate)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))))

(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t)
  (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

(use-package org-appear
  :hook (org-mode . org-appear-mode))
#+END_SRC

*** Native compilation
I'm using the native compilation features introduced in Emacs 28.
The following setting suppresses automatic display of warning messages.
#+BEGIN_SRC emacs-lisp
(setq comp-async-report-warnings-errors        nil
      native-comp-async-report-warnings-errors nil)
#+END_SRC

** Packages
*** use-package

#+BEGIN_SRC emacs-lisp
(use-package use-package)
#+END_SRC

*** Vertico | savehist | orderless | marginalia | Embark | Consult
This section outlines my preference for Emacs' completion system/interface.
- Vertico: consistent, minimalistic completion UI
- savehist: persists completion history
- orderless: intuitive completion style for candidates based on space separated patterns
- marginalia: annotations for minibuffer candidates
- Embark: act on targets, sort of like a right-click menu
- Consult: practical completion

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :hook (after-init . vertico-mode)
  :custom
  (vertico-resize t))

(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))

(use-package marginalia
  :hook (after-init . marginalia-mode)
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))

(use-package embark
  :bind
  (("C-," . embark-act))

  :init
  (setq prefix-help-command #'embark-prefix-help-command))

(use-package consult
  :bind (("C-s"   . consult-line)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)

         ("C-x M-:" . consult-complex-command)
         ("C-x b"   . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("C-x r b" . consult-bookmark)
         ("C-x p b" . consult-project-buffer)

         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)
         ("C-M-#" . consult-register)

         ("M-y" . consult-yank-pop)
         ("<help> a" . consult-apropos)

         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flycheck)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)

         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)

         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)
         ("M-s e" . consult-isearch-history)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)

         :map minibuffer-local-map
         ("M-s" . consult-history)
         ("M-r" . consult-history))

  ;; Enable automatic preview at point in the *Completions* buffer.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Add thin lines, sorting and hide the mode line of the register preview window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config

  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-recent-file
   consult--source-project-recent-file
   :preview-key (kbd "M-."))

  (setq consult-narrow-key "<") ;; (kbd "C-+")

  (autoload 'projectile-project-root "projectile")
  (setq consult-project-function (lambda (_) (projectile-project-root))))
#+END_SRC
