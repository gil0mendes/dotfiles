#+OPTIONS: html5-fancy:t
#+HTML_DOCTYPE: html5
#+STARTUP: overview
#+TITLE: My Emacs Cofiguration
#+AUTHOR: Gil Mendes
#+EMAIL: gil00mendes@gmail.com

This is my literate configuration for [[https://www.gnu.org/software/emacs/][Emacs]].

* Pre configurations

** Tangle providence notice

#+begin_src elisp :noweb-ref tangle-providence
;; Tangled from dotfiles/configs/efs/README.org

#+end_src

*** early-init.el

#+begin_src elisp :tangle early-init.el :noweb yes
  <<tangle-providence>>
#+end_src

*** init.el

#+begin_src elisp :tangle init.el :noweb yes
  <<tangle-providence>>
#+end_src

** early-init.el

The [[file:early-init.el]] will be loaded before the "read configuration" is evaliated. Some configuration settings may have to be set at this stage but this should be used sparingly as it may be an inication of poor configuration when one has to resort too ofen to configuring at this state.

#+begin_src elist :tangle early-init.el
  (message "🥱 Loading early-init.el")

  (setq package-enable-at-startup nil)

  (setq use-package-verbose t)

  (add-hook 'before-init-hook (lambda () (message "🪝 Before init")))
  (add-hook 'after-init-hook (lambda () (message "🪝 After init")))
  (add-hook 'emacs-startup-hook (lambda () (message "🪝 Emacs startup")))
  (add-hook 'window-setup-hook (lambda () (message "🪝 Window setup")))
#+end_src

** init.el

We enable lexical binding, since some packages (e.g.: consult) will require this.

#+begin_src elisp :tangle init.el
  ;; -*- lexical-binding: t -*-

  (message "🚜 Loading init.el")
#+end_src

** Package manager

[[https://github.com/radian-software/straight.el#getting-started][Straight.el]] 🍀 is a popular package manager used to manage Emacs packages.

#+begin_src elisp :tangle init.el
  ;; https://github.com/radian-software/straight.el#getting-started
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

*** Enabling the commonly-used *use-package* interface

For [[use-package-format][convenience]], we configure *straight.el* to use the *use-package* interface.

#+begin_src elisp :tangle init.el
  ;; https://github.com/radian-software/straight.el#integration-with-use-package
  (straight-use-package 'use-package)
#+end_src

** Startup

Time the startup and display the startup time after completed.

#+begin_src elisp :tangle init.el
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s seconds with %d garbage collection."
		       (emacs-init-time "%.2f")
		       gcs-done)))
#+end_src

Temporarily reduce garbage colletion to gain some performance boot during startup.

#+begin_src elisp :tangle init.el
  (let ((normal-gc-cons-threshold gc-cons-threshold)
      (normal-gc-cons-percentage gc-cons-percentage)
      (normal-file-name-handler-alist file-name-handler-alist)
      (init-gc-cons-threshold most-positive-fixnum)
      (init-gc-cons-percentage 0.6))
  (setq gc-cons-threshold init-gc-cons-threshold
        gc-cons-percentage init-gc-cons-percentage
        file-name-handler-alist nil)
  (add-hook 'after-init-hook
            `(lambda ()
               (setq gc-cons-threshold ,normal-gc-cons-threshold
                     gc-cons-percentage ,normal-gc-cons-percentage
                     file-name-handler-alist ',normal-file-name-handler-alist))))
#+end_src

Inhibit startup screen and messages.

#+begin_src elisp :tangle init.el
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
#+end_src

Performance tweaks. Don't load default library and use =fundamental-mode= to reduce amount of hooks.

#+begin_src elisp :tangle init.el
  (setq inhibit-default-init t)
  (setq initial-major-mode 'fundamental-mode)
#+end_src

** Server mode

Start the Emacs server from this instance so that all =emacsclient= calls are routed here.

#+begin_src elisp :tangle init.el
(server-start)
#+end_src

** Disable autosaving and ring bell

#+begin_src elisp :tangle init.el
  (setq auto-save-default nil
  ring-bell-function 'ignore)
#+end_src

** Winner mode

#+begin_src elisp :tangle init.el
  (winner-mode 1)
#+end_src

** Discard customizations
Emacs has a comprehensive customization system that allows configuration changes interactively.
Personally, I opt to ensure all the configuration I use for my environment is declarative.
As such, the following configuration sets the ~custom-file~ to be a random temporary file created each time Emacs starts.
This means any customizations made interactively are discarded entirely.

#+BEGIN_SRC emacs-lisp
(setq custom-file (make-temp-file ""))
#+END_SRC

** Just use 'y' or 'n' instead of 'yes' or 'no'

You'll find =yes-or-no= prompts coming up in Emacs a lot.
I'd much rather just type =y= or =n= than =yes= or =no= every time...

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Confirm quit

This adds a confirmation prompt when quitting Emacs - because I'm only human.

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

** Set the scratch buffer string
Set the scratch buffer's initial contents to include a comment with a timestamp of creation.
Not really all that useful, but cleaner than the default comment, and I like having something there.
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message (format ";; Scratch buffer - started on %s\n\n" (current-time-string)))
#+END_SRC

** UI

Disable GUI components.

#+begin_src elisp :tangle init.el
  (setq use-dialog-box nil)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
  (blink-cursor-mode -1)
  (show-paren-mode 1)
#+end_src

* Apperance

This section will deal with some of the visual trappings of Emacs. My desing goal is to arrive at a rather minimal, or rather clean design.

** GLobably hightlight the current line

#+begin_src elisp :tangle init.el
  (global-hl-line-mode)
#+end_src

** Rule column indicator

Display a border at the position to indicate where the right margin is drawn.

#+begin_src elisp :tangle init.el
  ;; https://www.emacswiki.org/emacs/FillColumnIndicator
  (setq display-fill-column-indicator-column 119)
  (global-display-fill-column-indicator-mode 1)
#+end_src

** Text

*** Set the font

#+begin_src elisp :tangle init.el
  (set-face-attribute 'default nil :font "Comic Code Ligatures" :height 120)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
		     :font "Comic Code Ligatures"
		     :height 120)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
		    :font "Comic Code Ligatures")
#+end_src

*** Default text scale

For global text scaling, the [[https://github.com/purcell/default-text-scale][default-text-scale]] package can be used. Without this package, scaling may require one to resize the text in every buffer independently which is an arduous task.

#+begin_src elisp :tangle init.el
  ;; https://github.com/purcell/default-text-scale
  (use-package default-text-scale
    :straight (default-text-scale :type git
				  :host github
				  :repo "purcell/default-text-scale")
    :hook ((after-init . default-text-scale-mode)))
#+end_src

** Themes

A nice gallery of Emacs themes can be found at https://emacsthemes.com/. I based the following function on https://yannesposito.com/posts/0014-change-emacs-theme-automatically/index.html.

#+begin_src elisp :tangle init.el
  (setq doom-theme 'doom-nord-light)
  (use-package doom-themes
    :straight (doom-themes :type git
			   :host github
			   :repo "doomemacs/themes"))

  (defun g/auto-update-theme ()
    "depending on time use different theme"
    ;; very early => gruvbox-light, solarized-light, nord-light
    (let* ((hour (nth 2 (decode-time (current-time))))
	   (theme (cond ((<= 7 hour 8)   'doom-gruvbox-light)
			((= 9 hour)      'doom-solarized-light)
			((<= 10 hour 16) 'doom-nord-light)
			((<= 17 hour 18) 'doom-gruvbox-light)
			((<= 19 hour 22) 'doom-oceanic-next)
			(t               'doom-laserwave))))
      (when (not (equal doom-theme theme))
	(setq doom-theme theme)
	(load-theme doom-theme t))
      ;; run that function again next hour
      (run-at-time (format "%02d:%02d" (+ hour 1) 0) nil 'g/auto-update-theme)))

  (g/auto-update-theme)
#+end_src

** svg-tag-mode

#+begin_src elisp :tangle init.el
  (use-package svg-tag-mode
    :straight (svg-tag-mode :type git
			    :host github
			    :repo "rougier/svg-tag-mode"))
#+end_src

** Comment Dired-k

The standard Emacs directory editor named dired doesn't ship with convenient highlighting or coloring of the listed files. The dired-k package adds some flair to the dired ouput.

#+begin_src elisp :tangle init.el
  ;; https://github.com/emacsorphanage/dired-k
  (use-package dired-k
  :straight (dired-k :type git
                     :host github
                     :repo "emacsorphanage/dired-k")
  :init
  (setq dired-k-style 'git)
  :hook (dired-initial-position-hook . dired-k))
#+end_src

** Icons: all the icons

#+begin_src elisp :tangle init.el
  ;; https://github.com/domtronn/all-the-icons.el
  (use-package all-the-icons
    :straight (all-the-icons :type git
			     :host github
			     :repo "domtronn/all-the-icons.el"))
#+end_src

Post-installation, don't forget to run ~all-the-icons-install-fonts~.

** Scrolling

In order to [[https://www.emacswiki.org/emacs/SmoothScrolling][facilitate smoother scrolling]] than the default i.e.: "when scrolling out of view, scroll such that point is in the middle of the buffer", we set =scroll-conservatively= to allow for more line-by-line scrolling.

#+begin_src elisp :tangle init.el
  ;; https://www.emacswiki.org/emacs/SmoothScrolling
  (setq-default scroll-conservatively 100)
#+end_src

💡 If you want to center the cursor (or point in Emacs vernacular), the ~evil-scroll-line-to-center~ command bound to =z z= is your friend.

* Misc

** About me

Tell Emacs who's driving.

#+begin_src elisp :tangle init.el
  (setq user-full-name      "Gil Mendes"
        user-mail-address   "gil00mendes@gmail.com")
#+end_src

** Undo

Simple, stable linear undo with redo for Emacs.

#+begin_src elisp :tangle init.el
  ;; https://github.com/emacsmirror/undo-fu
  (use-package undo-fu
  :straight (undo-fu :type git
                     :host github
                     :repo "emacsmirror/undo-fu"))
#+end_src

** <<async>> Async

Emacs is single-threaded and this makes sense considering that many packages navigate the live buffers or affect change to these buffers. Just imagine the mess if these packages attempted to conduct these operations on Emacs buffers concurrently. 😧

[[https://github.com/jwiegley/emacs-async][Emacs async]] allows for some async code execution which can come in handy for logic that may otherwise have blocked the Emacs main thread for too long.

#+begin_src elisp :tangle init.el
  (use-package async
    :straight (async :type git
                   :host github
                   :repo "jwiegley/emacs-async"))
#+end_src

** <<evil>> Evil

In order to save my hands some pain, it is helpful to use vi-like bindings that keep your hands around the home row more often and minimizes the need for your hands to pull acrobatic maneuvers 🎪 that could incur some strain -- those Emacs /key-chords/. I use the [[https://github.com/emacs-evil/evil][extensible vi layer, inconveniently but mischievously abbreviated to Evil]], to help me to vi-bindings while in Emacs.

Consult the [[https://github.com/noctuid/evil-guide][guide]] for more information on evil. Note that the vi commands started with colon such a =:e=, =:s= and =:g= are mapped through evil-ex (see [[https://gist.github.com/agzam/acd3b5e311f8f7e87e21b550856f65e1][agzam's write up]] on these evil-ex commands for reference).

#+begin_src elisp :tangle init.el
    ;; https://github.com/emacs-evil/evil
    ;; https://github.com/noctuid/evil-guide
    (use-package evil
      :straight (evil :type git
		    :host github
		    :repo "emacs-evil/evil")
      :after
      undo-fu
      :init
      ;; pre-set some evil vars prior to package load
      (setq evil-respect-visual-line-mode t)
      (setq evil-undo-system 'undo-fu)
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-mode-line-format nil)
      :config
      (message "😈 Configured evil-mode"))
#+end_src

#+begin_src elisp :tangle init.el
  (use-package evil-collection
    :straight (evil-collection :type git
			       :host github
			       :repo "emacs-evil/evil-collection")
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-mode 1)
    (message "😈 Enable evil-mode")
    (evil-collection-init))
#+end_src

* ORG mode

Various pieces of configuration for the mighty org-mode.

#+begin_src elisp :tangle init.el
  (use-package org-mode
    :ensure nil
    :hook
    (org-mode . org-indent-mode)
    (org-mode . variable-pitch-mode)
    (org-mode . visual-line-mode)
          :custom-face
  (avy-lead             ((t (:inherit fixed-pitch))))
  (avy-lead-face-0      ((t (:inherit fixed-pitch))))
  (avy-lead-face-1      ((t (:inherit fixed-pitch))))
  (avy-lead-face-2      ((t (:inherit fixed-pitch))))
  (company-tooltip      ((t (:inherit fixed-pitch))))
  (org-table            ((t (:inherit fixed-pitch))))
  (org-formula          ((t (:inherit fixed-pitch))))
  (org-checkbox         ((t (:inherit fixed-pitch))))
  (org-code             ((t (:inherit fixed-pitch))))
  (org-verbatim         ((t (:inherit fixed-pitch))))
  (org-special-keyword  ((t (:inherit fixed-pitch))))
  (org-meta-line        ((t (:inherit fixed-pitch))))
  (org-block            ((t (:foreground nil :inherit fixed-pitch))))
  (org-indent           ((t (:inherit (org-hide fixed-pitch)))))
  (fixed-pitch          ((t (:family "Menlo" :height 120))))
  (variable-pitch       ((t (:family "ETBembo" :height 160))))

  :init
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 0
        org-src-preserve-indentation t
        org-cycle-separator-lines 2
        org-clock-persist 'history)

  (font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  :config
  (org-clock-persistence-insinuate)

  (dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                (org-level-3 . 1.05)
                (org-level-4 . 1.0)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))))
#+end_src

Add custom header indicators to make it look nicer.

#+begin_src elisp :tangle init.el
  ;; https://github.com/integral-dw/org-superstar-mode
  (use-package org-superstar
    :straight (org-superstar :type git
                             :host github
                             :repo "integral-dw/org-superstar-mode")
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

Toggle visibility of hidden Org mode element parts upon entering and leaving an element.

#+begin_src elisp :tangle init.el
  ;; https://github.com/awth13/org-appear
  (use-package org-appear
    :straight (org-appear :type git
                          :host github
                          :repo "awth13/org-appear")
    :hook (org-mode . org-appear-mode))
#+end_src
